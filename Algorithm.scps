#--------------------------------------------------------
#
# This file is created by summary commenter 
#
#--------------------------------------------------------

# Setting
setting.descNumbering        =   0
setting.issueNumbering       =   0
setting.refURLNumbering      =   0
setting.recursiveTraversal   =   1
setting.divBySeparator       =   0
setting.divByStartEndTag     =   1

# Flags
flag.Sup_Div_Line   =   1
flag.Project_Name   =   1
flag.File_Name   =   1
flag.Author   =   1
flag.Team   =   0
flag.Created_Date   =   0
flag.Last_Edited   =   0
flag.Desc   =   1
flag.Issue   =   1
flag.Email   =   0
flag.Telephone   =   0
flag.Github_Account   =   0
flag.Ref_URLs   =   1
flag.Memo   =   0
flag.Sub_Div_Line   =   1

# Globals
global.Extension        =  "h"
global.Project_Name     =  ""
global.Project_Path     =  "C:\Algorithm-DS-Practice\Baekjoon-Algorithm"
global.Author           =  "jopemachine"
global.Separator        =  "@ "
global.StartTag         =  "/*"
global.EndTag           =  "*/"
global.Sub_Div_Line     =  "==============================+==============================================================="
global.Sup_Div_Line     =  "==============================+==============================================================="
global.Email            =  ""
global.Telephone        =  ""
global.Github_Account   =  ""
global.Team             =  ""
global.Memo             =  ""

# Desc
1000.h::desc       +=       "A+B"
1001.h::desc       +=       "A-B"
1003_Fibonacci.h::desc       +=       "피보나치 함수
DP 기초 문제. cacheZero, cacheOne이란 int형 배열 2개를 만들어 반복문에서 주어진 input을 만드는데,
이용했다."
1008.h::desc       +=       "A/B"
1012_dfsWithStack.h::desc       +=       "유기농 배추
DFS 문제. 스택을 이용해 재귀 없이 풀어보았다."
1049.h::desc       +=       "기타줄
패키지의 최소 가격과 낱개의 최소 가격을 구한 후 최소 가격으로 살 수 있는 케이스를 3개 나눠 그 중 최소값을 구하니
쉽게 풀 수 있었다"
10610_30.h::desc       +=       "30의 배수라면 3의 배수이면서 10의 배수이다.
3의 배수이면 각 자리 수의 합이 3의 배수이며, 10의 배수라면 자릿 수 중 하나 이상의 값이 0이여야 한다.
이 두 조건을 만족하면 각 자릿 수를 내림차순으로 정렬한 수가 찾는 수 중 제일 큰 수이다.

입력 범위를 잘 안 보고 풀었다가 틀리고 나서야 long long int에도 담을 수 없는 큰 수가 입력이 될 수 있다는 걸 알고
1번으로 다시 풀었다. 처음에 풀었던 것은 버리지 않고 2번 풀이로 뒀다."
1065.h::desc       +=       "한수
단순한 brute force 문제."
10799.h::desc       +=       "** Fail **
쇠막대기
발상의 전환이 필요했던 문제. 아무리 생각해도 코드가 안 나와 구글에 검색해보고야
풀 수 있었다."
10972.h::desc       +=       "다음 순열
is_sorted, next_permutation의 사용법을 익혀두자. 
당연히 STL을 쓰지 않고 푸는 방법도 있다."
10974.h::desc       +=       "** Fail **
모든 순열
dfs로 풀 수 있다는데 방법을 모르겠어서 찾아봤다. 찾아보고 dfs로 완전 탐색해서 
리프에 해당하는 값 들을 출력해 풀 수 있다는 걸 알게 되었다."
10988_palindrome.h::desc       +=       "팰린드롬인지 확인하기
반복문으로 간단히 확인할 수 있다."
10998.h::desc       +=       "A*B"
11047_coin.h::desc       +=       "동전 0
간단하게 풀 수 있는 문제."
1110.h::desc       +=       "더하기 사이클"
11399_atm.h::desc       +=       "ATM
간단한 그리디 알고리즘 문제. solve_11399에 처음 풀이를 적었는데 (비쥬얼 스튜디오로 실행),
백준 컴파일러에서 돌아가지 않아 solve_11399_2로 풀어 제출했다."
11403_searchPath.h::desc       +=       "경로 찾기
풀다 만 문제."
11724.h::desc       +=       "연결 요소의 갯수
DFS를 이용하면 간단히 해결할 수 있다. 고립되어 있는 점들도 연결 요소로 카운팅해야 한다.
그 외 무향 그래프라는 것에 주의"
11729_topOfHanoi.h::desc       +=       "** Fail **
하노이 탑 이동 순서"
1260_dfsAndBfs.h::desc       +=       "DFS와 BFS
BFS의 경우, BFS 문제 풀이가 이 문제가 처음이었기 때문에, 큐 외에 재귀를 이용해 풀었는데,
사실 재귀는 이용할 필요 없음."
12865.h::desc       +=       "** Fail **
평범한 배낭 (배낭 문제).
DP 문제라는데 어떻게 풀 지 도저히 모르겠어서 종만북을 코드를 참고해 풀었다.
물건을 담지 않으면 pack(allItems, cache, capacity, index + 1, itemMaxNumber)가 ret,
물건을 담으면 위와 pack(allItems, cache, capacity - allItems[index].weight, index + 1, itemMaxNumber) + allItems[index].value)가
ret가 되므로 둘 중 큰 값을 ret로 하고 리턴하면 완전 탐색되어 풀린다.
중요한 것은 ret를 캐시에 저장해서 메모리제이션 할 것."
1377_bubbleSort.h::desc       +=       "** Fail **
버블 소트
풀다 만 문제. 생각보다 어려운 개념을 요구했음."
14502.h::desc       +=       "조합 문제를 처음 접해 어려웠다.
DFS로 가능한 모든 경우 (조합)을 만들고 Brute Force로 각 경우들을 점검하면서 안전 구역의 최댓값이 되는 케이스
를 구하고 그 최댓값을 출력해야 한다. "
1463.h::desc       +=       "1로 만들기
반복문을 돌면서 cache에 값들을 저장하면서 주어진 input 까지 반복문을 돌면 된다.
cache[2], cache[3]엔 직접 값을 넣어준다 (base case)"
1697.h::desc       +=       "숨바꼭질
항상 bfs, dfs는 이차원 배열로 나타나는 그래프에서만 사용해봐서 이 문제가 bfs로 풀 수 있는 유형이란 걸 몰랐다.

수민이가 할 수 있는 행동들을 트리 (또는 그래프) 로 만들어서 완전탐색 하면서 도착지에 도달할 수
있는지 보겠다는 것으로 봐도 될 것 같다."
1725_Histogram.h::desc       +=       "** Fail **
히스토그램
풀다 일단 포기함. 세그먼트 트리란 자료구조를 이용해야 한다고 함."
1753.h::desc       +=       "최단경로
풀다 계속 메모리 초과가 나서 애를 먹었음. 검색해보니 문제에서 요구하는 입력이 커서
그래프를 배열 형태로 표현하면 허용 메모리를 초과한다고 함. 
그래서 그래프를 list 형태(vector) 로 바꿔 표현한 후 풀었다. 
그 외 배열을 delete로 제거하려 하니 백준 컴파일러에서 런타임 에러가 났었다.
배열은 반드시 delete[]로 제거할 것."
1874_stackSequence.h::desc       +=       "스택 수열"
1912.h::desc       +=       "연속합
짜고 나니 정말 간단했지만, 어떻게 풀 수 있는지 잘 보이지 않았던 문제
반복문에서 지금 원소가 0보다 작을 때 Sum을 현재 input으로 초기화 해 주면 풀린다."
1916.h::desc       +=       "최소비용 구하기
다익스트라 알고리즘을 알고 있으면 풀 수 있는 문제.
STL의 우선순위 큐를 이용했다.
"
1918_inorder2PostOrder.h::desc       +=       "** Fail **
후위 표기식
계산기 작성에 이용한 알고리즘."
1931_MeetingRoom.h::desc       +=       "회의실배정
대표적인 그리디 문제. qsort를 이용하기 위해, descendingCompare를 구현함."
1946.h::desc       +=       "신입 사원
A 점수로 오름차순으로 정렬해 준 다음 B 점수에서 내림차순에 어긋나는 인원들을
제외하니 쉽게 풀림."
1966_printerQueue.h::desc       +=       "프린터 큐"
1978.h::desc       +=       "소수 찾기
에라토스테네스의 체 알고리즘을 공부하고 풀어봄"
1987_Alphabet.h::desc       +=       "알파벳
DFS 문제.
solve_dfs 내에서 isInArray를 4번씩 호출해 배열에 들어 있는 값인지 검사했다."
1992.h::desc       +=       "쿼드트리
문제 출력이 복잡해보이는데, divide란 함수를 정의해놓고 분할정복으로 푸니 간단했다."
2178_maze.h::desc       +=       "미로 탐색
dist를 -1로 초기화해 놓고, while문에서 dist를 검사함으로써, dist를 isVisited 대신 쓸 수 있다."
2193.h::desc       +=       "이친수"
2217.h::desc       +=       "로프"
2579.h::desc       +=       "** Fail **
계단 오르기"
2606.h::desc       +=       "바이러스
BFS 문제. 노드들을 중복해 카운팅하지 않기 위해 linked란 vector<int>를 만들고 중복되면 linked에
넣지 않았다."
2630.h::desc       +=       "색종이 만들기
간단한 분할정복 문제."
2667_floodFillWithDFS.h::desc       +=       "단지번호붙이기
DFS 문제"
2905_paintPlane.h::desc       +=       "** Fail **"
2997.h::desc       +=       "네 번째 수"
3986_Goodword.h::desc       +=       "좋은 단어
마지막에 스택이 clear 된다면 좋은 단어이고,
스택이 비어 있지 않다면 좋은 단어가 아니다."
4307_ant.h::desc       +=       "개미"
4963_numberOfIsland.h::desc       +=       "섬의 개수
BFS로 간단하게 풀 수 있는 문제. 대각선까지 고려해야하므로 8개 방향으로 모두 완전탐색해야 한다."
5585.h::desc       +=       "거스름돈"
7576.h::desc       +=       "토마토
처음에, BFS인 건 맞는데 시작점이 여러 개면 어떻게 풀지? 하고 해맸던 문제.
시작점이 여러 개면 그냥 큐에 여러 시작점들 push하고 BFS 돌리면 되지 않을까?
싶어서 그렇게 풀고 맞았다."
9012_Parentheses.h::desc       +=       "괄호"
9095.h::desc       +=       "** Fail **
1, 2, 3 더하기"

# Issue
1000.h::issue       +=       ""
1001.h::issue       +=       ""
1003_Fibonacci.h::issue       +=       ""
1008.h::issue       +=       ""
1012_dfsWithStack.h::issue       +=       ""
10610_30.h::issue       +=       ""
1065.h::issue       +=       ""
10799.h::issue       +=       ""
10988_palindrome.h::issue       +=       ""
10998.h::issue       +=       ""
11047_coin.h::issue       +=       ""
11399_atm.h::issue       +=       ""
11403_searchPath.h::issue       +=       ""
11729_topOfHanoi.h::issue       +=       ""
1260_dfsAndBfs.h::issue       +=       ""
1377_bubbleSort.h::issue       +=       ""
1463.h::issue       +=       ""
1725_Histogram.h::issue       +=       ""
1753.h::issue       +=       ""
1874_stackSequence.h::issue       +=       ""
1916.h::issue       +=       ""
1918_inorder2PostOrder.h::issue       +=       ""
1931_MeetingRoom.h::issue       +=       ""
1966_printerQueue.h::issue       +=       ""
1987_Alphabet.h::issue       +=       ""
1992.h::issue       +=       ""
2178_maze.h::issue       +=       ""
2193.h::issue       +=       ""
2630.h::issue       +=       ""
2667_floodFillWithDFS.h::issue       +=       "cin에 대해 몰랐던 부분이 있어 코드에서 다소 어렵게 입력을 받았는데, 
for (int i = 0; i < N; i++) cin >> graph[i]; 와 같이 써서, 입력을 단순하게 받을 수 있다."
2905_paintPlane.h::issue       +=       ""
2997.h::issue       +=       ""
3986_Goodword.h::issue       +=       ""
4307_ant.h::issue       +=       ""
4963_numberOfIsland.h::issue       +=       ""
9012_Parentheses.h::issue       +=       ""
9095.h::issue       +=       ""

# Reference URLs
1000.h::refURLs       +=       ""
1001.h::refURLs       +=       ""
1003_Fibonacci.h::refURLs       +=       ""
1008.h::refURLs       +=       ""
1012_dfsWithStack.h::refURLs       +=       ""
10610_30.h::refURLs       +=       ""
1065.h::refURLs       +=       ""
10799.h::refURLs       +=       ""
10972.h::refURLs       +=       "https://kwanghyuk.tistory.com/25"
10974.h::refURLs       +=       ""
10988_palindrome.h::refURLs       +=       ""
10998.h::refURLs       +=       ""
11047_coin.h::refURLs       +=       ""
1110.h::refURLs       +=       ""
11399_atm.h::refURLs       +=       "http://blog.naver.com/PostView.nhn?blogId=occidere&logNo=220790825104&parentCategoryNo=&categoryNo=14&viewDate=&isShowPopularPosts=false&from=postView"
11403_searchPath.h::refURLs       +=       ""
11724.h::refURLs       +=       ""
11729_topOfHanoi.h::refURLs       +=       ""
1260_dfsAndBfs.h::refURLs       +=       ""
12865.h::refURLs       +=       "프로그래밍 대회에서 배우는 알고리즘 해결 전략 284 페이지"
1377_bubbleSort.h::refURLs       +=       ""
14502.h::refURLs       +=       "https://gorakgarak.tistory.com/523
https://yabmoons.tistory.com/99"
1463.h::refURLs       +=       ""
1697.h::refURLs       +=       "https://hsp1116.tistory.com/20"
1725_Histogram.h::refURLs       +=       "https://mygumi.tistory.com/177
http://blog.naver.com/PostView.nhn?blogId=kks227&logNo=220781557098&parentCategoryNo=&categoryNo=299&viewDate=&isShowPopularPosts=false&from=postList"
1753.h::refURLs       +=       ""
1874_stackSequence.h::refURLs       +=       ""
1912.h::refURLs       +=       ""
1916.h::refURLs       +=       ""
1918_inorder2PostOrder.h::refURLs       +=       ""
1931_MeetingRoom.h::refURLs       +=       ""
1946.h::refURLs       +=       ""
1966_printerQueue.h::refURLs       +=       ""
1978.h::refURLs       +=       ""
1987_Alphabet.h::refURLs       +=       ""
1992.h::refURLs       +=       ""
2178_maze.h::refURLs       +=       ""
2193.h::refURLs       +=       ""
2217.h::refURLs       +=       ""
2579.h::refURLs       +=       ""
2606.h::refURLs       +=       ""
2630.h::refURLs       +=       ""
2667_floodFillWithDFS.h::refURLs       +=       ""
2905_paintPlane.h::refURLs       +=       "https://jaimemin.tistory.com/832"
2997.h::refURLs       +=       ""
3986_Goodword.h::refURLs       +=       ""
4307_ant.h::refURLs       +=       "https://dojang.io/mod/page/view.php?id=638"
4963_numberOfIsland.h::refURLs       +=       ""
5585.h::refURLs       +=       ""
7576.h::refURLs       +=       ""
9012_Parentheses.h::refURLs       +=       ""
9095.h::refURLs       +=       "https://nhs0912.tistory.com/62"

# Excluded files
